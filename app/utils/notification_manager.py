import logging
from typing import List, Optional
from aiogram import Bot
from config import config

logger = logging.getLogger(__name__)

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    
    def __init__(self):
        self.admin_ids = config.ADMIN_IDS
        self.notification_queue = []
        self.max_retries = 3
    
    async def notify_admins(
        self, 
        message: str, 
        bot: Bot, 
        parse_mode: str = "HTML"
    ) -> List[int]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        successful_sends = []
        
        for admin_id in self.admin_ids:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=message,
                    parse_mode=parse_mode
                )
                successful_sends.append(admin_id)
                logger.info(f"Notification sent to admin {admin_id}")
                
            except Exception as e:
                logger.error(f"Failed to send notification to admin {admin_id}: {e}")
        
        return successful_sends
    
    async def notify_admin(
        self, 
        admin_id: int, 
        message: str, 
        bot: Bot, 
        parse_mode: str = "HTML"
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode=parse_mode
            )
            logger.info(f"Notification sent to admin {admin_id}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send notification to admin {admin_id}: {e}")
            return False
    
    async def notify_new_order(
        self, 
        username: str, 
        user_id: int, 
        project_name: str, 
        budget: str, 
        bot: Bot
    ) -> List[int]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É"""
        message = (
            f"üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"üÜî ID: {user_id}\n"
            f"üìù –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: {budget}\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {self._get_current_time()}"
        )
        
        return await self.notify_admins(message, bot)
    
    async def notify_new_application(
        self, 
        username: str, 
        user_id: int, 
        full_name: str, 
        role: str, 
        experience: str, 
        bot: Bot
    ) -> List[int]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ –∫–æ–º–∞–Ω–¥—É"""
        message = (
            f"üë• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"üÜî ID: {user_id}\n"
            f"üìù –ò–º—è: {full_name}\n"
            f"üé≠ –†–æ–ª—å: {role}\n"
            f"üíº –û–ø—ã—Ç: {experience[:100]}...\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {self._get_current_time()}"
        )
        
        return await self.notify_admins(message, bot)
    
    async def notify_new_consultation(
        self, 
        username: str, 
        user_id: int, 
        question: str, 
        bot: Bot
    ) -> List[int]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
        message = (
            f"üí¨ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"üÜî ID: {user_id}\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å: {question[:200]}...\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {self._get_current_time()}"
        )
        
        return await self.notify_admins(message, bot)
    
    async def notify_portfolio_update(
        self, 
        action: str, 
        project_title: str, 
        admin_username: str, 
        bot: Bot
    ) -> List[int]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
        action_emoji = {
            "add": "‚ûï",
            "edit": "‚úèÔ∏è", 
            "delete": "üóëÔ∏è"
        }
        
        message = (
            f"{action_emoji.get(action, 'üìù')} <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</b>\n\n"
            f"üîß –î–µ–π—Å—Ç–≤–∏–µ: {action.capitalize()}\n"
            f"üìù –ü—Ä–æ–µ–∫—Ç: {project_title}\n"
            f"üë§ –ê–¥–º–∏–Ω: @{admin_username}\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {self._get_current_time()}"
        )
        
        return await self.notify_admins(message, bot)
    
    async def notify_error(
        self, 
        error_message: str, 
        context: str, 
        bot: Bot
    ) -> List[int]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = (
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!</b>\n\n"
            f"üîß –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n"
            f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {self._get_current_time()}"
        )
        
        return await self.notify_admins(message, bot)
    
    async def notify_stats(
        self, 
        stats: dict, 
        bot: Bot
    ) -> List[int]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            f"üìã –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É: {stats.get('orders', 0)}\n"
            f"üë• –ó–∞—è–≤–æ–∫ –≤ –∫–æ–º–∞–Ω–¥—É: {stats.get('applications', 0)}\n"
            f"üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {stats.get('consultations', 0)}\n"
            f"üé® –ü—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {stats.get('portfolio', 0)}\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {self._get_current_time()}"
        )
        
        return await self.notify_admins(message, bot)
    
    def _get_current_time(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime
        return datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    def add_admin(self, admin_id: int) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if admin_id not in self.admin_ids:
            self.admin_ids.append(admin_id)
            logger.info(f"Added new admin: {admin_id}")
    
    def remove_admin(self, admin_id: int) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if admin_id in self.admin_ids:
            self.admin_ids.remove(admin_id)
            logger.info(f"Removed admin: {admin_id}")
    
    def get_admin_list(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        return self.admin_ids.copy()
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admin_ids

# –°–∏–Ω–≥–ª—Ç–æ–Ω-—ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
notification_manager = NotificationManager()
