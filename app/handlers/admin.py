import logging
from typing import Optional, Dict, Any, List
from aiogram import types, F, Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import config
from app.db.database import db
from app.keyboards import kb
from app.fsm import AdminStates
from app.utils.message_manager import MessageManager
from app.utils.notification_manager import NotificationManager
from app.utils.error_handler import error_handler, ErrorHandler
from app.utils.ui_components import UIComponents
from app.utils.cache_manager import DataValidator, cache, invalidate_admin_cache
from app.utils.performance_monitor import monitor_performance, performance_monitor

admin_router = Router()

# –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
message_manager = MessageManager()
notification_manager = NotificationManager()

# ================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–î–ú–ò–ù–ö–ò ================== #

@admin_router.callback_query(F.data == "system_monitor")
@error_handler("system_monitor")
async def system_monitor(callback: types.CallbackQuery, bot: Bot):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    stats_message = performance_monitor.format_stats_message()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    from app.utils.performance_monitor import HealthChecker
    health_report = HealthChecker.get_health_report()
    
    health_status = "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" if health_report['healthy'] else "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã"
    
    full_message = f"{stats_message}\n\nüè• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:</b> {health_status}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
    if not health_report['healthy']:
        full_message += "\n\nüîç <b>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º:</b>"
        for check_name, check_data in health_report['checks'].items():
            if not check_data['status']:
                full_message += f"\n‚Ä¢ {check_name}: {check_data['message']}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_monitor")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="clear_cache")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(full_message, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@admin_router.callback_query(F.data == "clear_cache")
@error_handler("clear_cache")
async def clear_cache(callback: types.CallbackQuery, bot: Bot):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    cache.clear()
    await callback.answer("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω!", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await system_monitor(callback, bot)

@admin_router.callback_query(F.data == "admin_panel")
@error_handler("admin_panel")
@monitor_performance("admin_panel")
async def admin_panel(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
    if callback.from_user.id not in config.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    admin_stats = cache.get("admin_dashboard_stats")
    if not admin_stats:
        admin_stats = db.get_admin_dashboard_stats()
        cache.set("admin_dashboard_stats", admin_stats, ttl=60)  # –ö—ç—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_message = UIComponents.format_admin_summary(admin_stats)
    
    await state.set_state(AdminMenu.main)
    await message_manager.edit_main_message(
        callback.from_user.id,
        stats_message,
        callback.message.message_id,
        kb.admin_menu(),
        bot
    )
    await callback.answer()

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ê–ú–ò –ù–ê –†–ê–ó–†–ê–ë–û–¢–ö–£ ================== #

@admin_router.callback_query(F.data == "admin_orders")
async def admin_orders(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É"""
    await state.set_state(AdminMenu.client_orders)
    await message_manager.edit_main_message(
        callback.from_user.id,
        "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É",
        callback.message.message_id,
        kb.admin_section_menu("–∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É"),
        bot
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_orders_list")
async def admin_orders_list(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É"""
    orders = db.get_client_orders()
    if not orders:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    order_ids = [order.id for order in orders]
    await state.update_data(order_ids=order_ids, current_index=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
    await show_order_details(callback, order_ids[0], 0, len(order_ids), bot)
    await callback.answer()

async def show_order_details(callback: types.CallbackQuery, order_id: int, current_index: int, total: int, bot: Bot):
    """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É"""
    order = db.get_client_order(order_id)
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    text = (
        f"üìã –ó–∞—è–≤–∫–∞ #{order.id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order.username}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {order.status}\n\n"
        f"<b>–ü—Ä–æ–µ–∫—Ç:</b> {order.project_name}\n"
        f"<b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b> {order.functionality}\n"
        f"<b>–°—Ä–æ–∫–∏:</b> {order.deadlines}\n"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> {order.budget}"
    )
    
    await message_manager.edit_main_message(
        callback.from_user.id,
        text,
        callback.message.message_id,
        kb.item_actions(order.id, order.user_id, current_index, total, "order"),
        bot
    )

@admin_router.callback_query(F.data.startswith("order_prev_"))
async def order_prev(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞—è–≤–∫–µ"""
    data = await state.get_data()
    order_ids = data.get('order_ids', [])
    current_index = data.get('current_index', 0)
    
    if not order_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫!", show_alert=True)
        return
    
    new_index = (current_index - 1) % len(order_ids)
    await state.update_data(current_index=new_index)
    await show_order_details(callback, order_ids[new_index], new_index, len(order_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("order_next_"))
async def order_next(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–µ"""
    data = await state.get_data()
    order_ids = data.get('order_ids', [])
    current_index = data.get('current_index', 0)
    
    if not order_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫!", show_alert=True)
        return
    
    new_index = (current_index + 1) % len(order_ids)
    await state.update_data(current_index=new_index)
    await show_order_details(callback, order_ids[new_index], new_index, len(order_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("order_accept_"))
async def order_accept(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º)"""
    order_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    order_ids = data.get('order_ids', [])
    current_index = data.get('current_index', 0)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
    if db.delete_client_order(order_id):
        await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    else:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    if order_id in order_ids:
        order_ids.remove(order_id)
    
    if not order_ids:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –µ—Å–ª–∏ –∑–∞—è–≤–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç
        await admin_orders(callback, state, bot)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–µ
    new_index = current_index
    if current_index >= len(order_ids):
        new_index = len(order_ids) - 1
    
    await state.update_data(order_ids=order_ids, current_index=new_index)
    await show_order_details(callback, order_ids[new_index], new_index, len(order_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("order_reject_"))
async def order_reject(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º)"""
    order_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    order_ids = data.get('order_ids', [])
    current_index = data.get('current_index', 0)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
    if db.delete_client_order(order_id):
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    else:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    if order_id in order_ids:
        order_ids.remove(order_id)
    
    if not order_ids:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –µ—Å–ª–∏ –∑–∞—è–≤–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç
        await admin_orders(callback, state, bot)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–µ
    new_index = current_index
    if current_index >= len(order_ids):
        new_index = len(order_ids) - 1
    
    await state.update_data(order_ids=order_ids, current_index=new_index)
    await show_order_details(callback, order_ids[new_index], new_index, len(order_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("order_contact_"))
async def order_contact(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–°–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ –∑–∞—è–≤–∫–µ"""
    parts = callback.data.split("_")
    order_id = int(parts[2])
    user_id = int(parts[3])
    
    await callback.answer(f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–≤—è–∑–∏: tg://user?id={user_id}", show_alert=True)
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    total = len(data.get('order_ids', []))
    await show_order_details(callback, order_id, current_index, total, bot)
    await callback.answer()

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ê–ú–ò –í –ö–û–ú–ê–ù–î–£ ================== #

@admin_router.callback_query(F.data == "admin_applications")
async def admin_applications(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –≤ –∫–æ–º–∞–Ω–¥—É"""
    await state.set_state(AdminMenu.team_applications)
    await message_manager.edit_main_message(
        callback.from_user.id,
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –≤ –∫–æ–º–∞–Ω–¥—É",
        callback.message.message_id,
        kb.admin_section_menu("–∑–∞—è–≤–æ–∫ –≤ –∫–æ–º–∞–Ω–¥—É"),
        bot
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_applications_list")
async def admin_applications_list(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ –∫–æ–º–∞–Ω–¥—É"""
    applications = db.get_team_applications()
    if not applications:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    app_ids = [app.id for app in applications]
    await state.update_data(app_ids=app_ids, current_index=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
    await show_application_details(callback, app_ids[0], 0, len(app_ids), bot)
    await callback.answer()

async def show_application_details(callback: types.CallbackQuery, app_id: int, current_index: int, total: int, bot: Bot):
    """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—É"""
    app = db.get_team_application(app_id)
    if not app:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    text = (
        f"üë• –ó–∞—è–≤–∫–∞ #{app.id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{app.username}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {app.status}\n\n"
        f"<b>–ò–º—è:</b> {app.full_name}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {app.age}\n"
        f"<b>–û–ø—ã—Ç:</b> {app.experience}\n"
        f"<b>–°—Ç–µ–∫:</b> {app.stack}\n"
        f"<b>–û —Å–µ–±–µ:</b> {app.about}\n"
        f"<b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è:</b> {app.motivation}\n"
        f"<b>–†–æ–ª—å:</b> {app.role}"
    )
    
    await message_manager.edit_main_message(
        callback.from_user.id,
        text,
        callback.message.message_id,
        kb.item_actions(app.id, app.user_id, current_index, total, "app"),
        bot
    )

@admin_router.callback_query(F.data.startswith("app_prev_"))
async def app_prev(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞—è–≤–∫–µ"""
    data = await state.get_data()
    app_ids = data.get('app_ids', [])
    current_index = data.get('current_index', 0)
    
    if not app_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫!", show_alert=True)
        return
    
    new_index = (current_index - 1) % len(app_ids)
    await state.update_data(current_index=new_index)
    await show_application_details(callback, app_ids[new_index], new_index, len(app_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("app_next_"))
async def app_next(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–µ"""
    data = await state.get_data()
    app_ids = data.get('app_ids', [])
    current_index = data.get('current_index', 0)
    
    if not app_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫!", show_alert=True)
        return
    
    new_index = (current_index + 1) % len(app_ids)
    await state.update_data(current_index=new_index)
    await show_application_details(callback, app_ids[new_index], new_index, len(app_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("app_accept_"))
async def app_accept(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—É (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º)"""
    app_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    app_ids = data.get('app_ids', [])
    current_index = data.get('current_index', 0)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
    if db.delete_team_application(app_id):
        await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    else:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    if app_id in app_ids:
        app_ids.remove(app_id)
    
    if not app_ids:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –µ—Å–ª–∏ –∑–∞—è–≤–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç
        await admin_applications(callback, state, bot)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–µ
    new_index = current_index
    if current_index >= len(app_ids):
        new_index = len(app_ids) - 1
    
    await state.update_data(app_ids=app_ids, current_index=new_index)
    await show_application_details(callback, app_ids[new_index], new_index, len(app_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("app_reject_"))
async def app_reject(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—É (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º)"""
    app_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    app_ids = data.get('app_ids', [])
    current_index = data.get('current_index', 0)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
    if db.delete_team_application(app_id):
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    else:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    if app_id in app_ids:
        app_ids.remove(app_id)
    
    if not app_ids:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –µ—Å–ª–∏ –∑–∞—è–≤–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç
        await admin_applications(callback, state, bot)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–µ
    new_index = current_index
    if current_index >= len(app_ids):
        new_index = len(app_ids) - 1
    
    await state.update_data(app_ids=app_ids, current_index=new_index)
    await show_application_details(callback, app_ids[new_index], new_index, len(app_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("app_contact_"))
async def app_contact(callback: types.CallbackQuery, state: FSMContext):
    """–°–≤—è–∑—å —Å —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–º"""
    parts = callback.data.split("_")
    app_id = int(parts[2])
    user_id = int(parts[3])
    
    await callback.answer(f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–≤—è–∑–∏: tg://user?id={user_id}", show_alert=True)
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    total = len(data.get('app_ids', []))
    await show_application_details(callback, app_id, current_index, total)

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø–ú–ò ================== #

@admin_router.callback_query(F.data == "admin_consultations")
async def admin_consultations(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏"""
    await state.set_state(AdminMenu.consultations)
    await message_manager.edit_main_message(
        callback.from_user.id,
        "üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏",
        callback.message.message_id,
        kb.admin_section_menu("–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"),
        bot
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_consultations_list")
async def admin_consultations_list(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    consultations = db.get_consultation_requests()
    if not consultations:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    req_ids = [req.id for req in consultations]
    await state.update_data(req_ids=req_ids, current_index=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    await show_consultation_details(callback, req_ids[0], 0, len(req_ids), bot)
    await callback.answer()

async def show_consultation_details(callback: types.CallbackQuery, req_id: int, current_index: int, total: int, bot: Bot):
    """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    req = db.get_consultation_request(req_id)
    if not req:
        await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    text = (
        f"üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{req.id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{req.username}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {req.status}\n\n"
        f"<b>–í–æ–ø—Ä–æ—Å:</b>\n{req.question}"
    )
    
    await message_manager.edit_main_message(
        callback.from_user.id,
        text,
        callback.message.message_id,
        kb.item_actions(req.id, req.user_id, current_index, total, "consult"),
        bot
    )

@admin_router.callback_query(F.data.startswith("consult_prev_"))
async def consult_prev(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    data = await state.get_data()
    req_ids = data.get('req_ids', [])
    current_index = data.get('current_index', 0)
    
    if not req_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!", show_alert=True)
        return
    
    new_index = (current_index - 1) % len(req_ids)
    await state.update_data(current_index=new_index)
    await show_consultation_details(callback, req_ids[new_index], new_index, len(req_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("consult_next_"))
async def consult_next(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    data = await state.get_data()
    req_ids = data.get('req_ids', [])
    current_index = data.get('current_index', 0)
    
    if not req_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!", show_alert=True)
        return
    
    new_index = (current_index + 1) % len(req_ids)
    await state.update_data(current_index=new_index)
    await show_consultation_details(callback, req_ids[new_index], new_index, len(req_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("consult_reply_"))
async def consult_reply(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    req_id = int(callback.data.split("_")[2])
    await state.set_state(AdminResponse.consultation)
    await state.update_data(req_id=req_id)
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.message(AdminResponse.consultation)
async def process_consult_reply(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    data = await state.get_data()
    req_id = data['req_id']
    
    req = db.get_consultation_request(req_id)
    if req:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                req.user_id,
                f"‚úâÔ∏è –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å (#{req_id}):\n\n{message.text}"
            )
            db.update_consultation_request(req_id, {"status": "answered"})
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
    else:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    await state.clear()
    await bot.delete_message(message.chat.id, message.message_id)

@admin_router.callback_query(F.data.startswith("consult_contact_"))
async def consult_contact(callback: types.CallbackQuery, state: FSMContext):
    """–°–≤—è–∑—å –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    parts = callback.data.split("_")
    req_id = int(parts[2])
    user_id = int(parts[3])
    
    await callback.answer(f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–≤—è–∑–∏: tg://user?id={user_id}", show_alert=True)
    data = await state.get_data()
    current_index = data.get('current_index', 0)
    total = len(data.get('req_ids', []))
    await show_consultation_details(callback, req_id, current_index, total)

@admin_router.callback_query(F.data.startswith("consult_complete_"))
async def consult_complete(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º)"""
    req_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    req_ids = data.get('req_ids', [])
    current_index = data.get('current_index', 0)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –ë–î
    if db.delete_consultation_request(req_id):
        await callback.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    else:
        await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    if req_id in req_ids:
        req_ids.remove(req_id)
    
    if not req_ids:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç
        await admin_consultations(callback, state, bot)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
    new_index = current_index
    if current_index >= len(req_ids):
        new_index = len(req_ids) - 1
    
    await state.update_data(req_ids=req_ids, current_index=new_index)
    await show_consultation_details(callback, req_ids[new_index], new_index, len(req_ids), bot)

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–¢–§–û–õ–ò–û ================== #

@admin_router.callback_query(F.data == "admin_portfolio")
async def admin_portfolio(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    await state.set_state(AdminMenu.portfolio_manage)
    await message_manager.edit_main_message(
        callback.from_user.id,
        "üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
        callback.message.message_id,
        kb.portfolio_management(),
        bot
    )
    await callback.answer()

@admin_router.callback_query(F.data == "portfolio_add")
async def portfolio_add_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    await state.set_state(PortfolioManage.add_title)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.message(PortfolioManage.add_title)
async def portfolio_add_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    await state.update_data(title=message.text)
    await state.set_state(PortfolioManage.add_description)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=kb.back_to_admin_menu()
    )

@admin_router.message(PortfolioManage.add_description)
async def portfolio_add_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    await state.update_data(description=message.text)
    await state.set_state(PortfolioManage.add_details)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=kb.back_to_admin_menu()
    )

@admin_router.message(PortfolioManage.add_details)
async def portfolio_add_details(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
    await state.update_data(details=message.text)
    await state.set_state(PortfolioManage.add_cost)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ (—á–∏—Å–ª–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç):",
        reply_markup=kb.back_to_admin_menu()
    )

@admin_router.message(PortfolioManage.add_cost)
async def portfolio_add_cost(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º"""
    await state.update_data(cost=message.text)
    await state.set_state(PortfolioManage.add_technologies)
    await message.answer(
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –Ω–∞–ø—Ä–∏–º–µ—Ä: Python, Aiogram, PostgreSQL",
        reply_markup=kb.back_to_admin_menu()
    )

@admin_router.message(PortfolioManage.add_technologies)
async def portfolio_add_technologies(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    await state.update_data(technologies=message.text)
    await state.set_state(PortfolioManage.add_duration)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 –Ω–µ–¥–µ–ª–∏, 10 –¥–Ω–µ–π, 1 –º–µ—Å—è—Ü):",
        reply_markup=kb.back_to_admin_menu()
    )

@admin_router.message(PortfolioManage.add_duration)
async def portfolio_add_duration(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    await state.update_data(duration=message.text)
    await state.set_state(PortfolioManage.add_video)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –ø—Ä–æ–µ–∫—Ç–∞ (Telegram/YouTube) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=kb.back_to_admin_menu()
    )

@admin_router.message(PortfolioManage.add_video)
async def portfolio_add_video(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ URL"""
    text = (message.text or "").strip()
    if text and text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(video_url=text)
    await state.set_state(PortfolioManage.add_bot_url)
    await message.answer(
        "–ï—Å–ª–∏ –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=kb.back_to_admin_menu()
    )

@admin_router.message(PortfolioManage.add_bot_url)
async def portfolio_add_bot_url(message: types.Message, state: FSMContext, bot: Bot):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (video_url –∏ bot_url –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã)"""
    data = await state.get_data()
    bot_url = None
    text = (message.text or "").strip()
    if text and text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        bot_url = text

    project_data = {
        "title": data["title"],
        "description": data["description"],
        "details": data["details"],
        "cost": data["cost"],
        "technologies": data.get("technologies"),
        "duration": data.get("duration"),
        "video_url": data.get("video_url"),
        "bot_url": bot_url,
    }

    project = db.create_portfolio_project(project_data)
    if project:
        await message.answer("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!")

    await state.clear()
    await bot.delete_message(message.chat.id, message.message_id)

@admin_router.callback_query(F.data == "portfolio_edit_list")
async def portfolio_edit_list(callback: types.CallbackQuery, bot: Bot):
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    projects = db.get_portfolio_projects()
    if not projects:
        await callback.answer("–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ!", show_alert=True)
        return
    
    text = "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    await message_manager.edit_main_message(
        callback.from_user.id,
        text,
        callback.message.message_id,
        kb.project_list(projects, "pedit_select"),
        bot
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pedit_select_"))
async def portfolio_edit_select(callback: types.CallbackQuery, bot: Bot):
    """–í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    project_id = int(callback.data.split("_")[2])
    project = db.get_portfolio_project(project_id)
    if project:
        text = (
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {project.title}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {project.description}\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {project.cost}"
        )
        await message_manager.edit_main_message(
            callback.from_user.id,
            text,
            callback.message.message_id,
            kb.portfolio_edit(project.id),
            bot
        )
    else:
        await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pedit_title_"))
async def portfolio_edit_title(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = int(callback.data.split("_")[2])
    await state.set_state(PortfolioManage.edit_field)
    await state.update_data(project_id=project_id, field="title")
    
    project = db.get_portfolio_project(project_id)
    await callback.message.answer(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {project.title}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pedit_desc_"))
async def portfolio_edit_desc(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = int(callback.data.split("_")[2])
    await state.set_state(PortfolioManage.edit_field)
    await state.update_data(project_id=project_id, field="description")
    
    project = db.get_portfolio_project(project_id)
    await callback.message.answer(
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {project.description}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pedit_details_"))
async def portfolio_edit_details(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = int(callback.data.split("_")[2])
    await state.set_state(PortfolioManage.edit_field)
    await state.update_data(project_id=project_id, field="details")
    
    project = db.get_portfolio_project(project_id)
    await callback.message.answer(
        f"–¢–µ–∫—É—â–∏–µ –¥–µ—Ç–∞–ª–∏: {project.details}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏:",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pedit_cost_"))
async def portfolio_edit_cost(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = int(callback.data.split("_")[2])
    await state.set_state(PortfolioManage.edit_field)
    await state.update_data(project_id=project_id, field="cost")
    
    project = db.get_portfolio_project(project_id)
    await callback.message.answer(
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {project.cost}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pedit_tech_"))
async def portfolio_edit_tech(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = int(callback.data.split("_")[2])
    await state.set_state(PortfolioManage.edit_field)
    await state.update_data(project_id=project_id, field="technologies")

    project = db.get_portfolio_project(project_id)
    current = project.technologies if project else "‚Äî"
    await callback.message.answer(
        f"–¢–µ–∫—É—â–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {current}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pedit_duration_"))
async def portfolio_edit_duration(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = int(callback.data.split("_")[2])
    await state.set_state(PortfolioManage.edit_field)
    await state.update_data(project_id=project_id, field="duration")

    project = db.get_portfolio_project(project_id)
    current = project.duration if project else "‚Äî"
    await callback.message.answer(
        f"–¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {current}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pedit_video_"))
async def portfolio_edit_video(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = int(callback.data.split("_")[2])
    await state.set_state(PortfolioManage.edit_field)
    await state.update_data(project_id=project_id, field="video_url")

    project = db.get_portfolio_project(project_id)
    current = project.video_url if project else "‚Äî"
    await callback.message.answer(
        f"–¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ: {current}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ '–æ—á–∏—Å—Ç–∏—Ç—å' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pedit_bot_"))
async def portfolio_edit_bot(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞"""
    project_id = int(callback.data.split("_")[2])
    await state.set_state(PortfolioManage.edit_field)
    await state.update_data(project_id=project_id, field="bot_url")

    project = db.get_portfolio_project(project_id)
    current = project.bot_url if project else "‚Äî"
    await callback.message.answer(
        f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {current}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ '–æ—á–∏—Å—Ç–∏—Ç—å' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.message(PortfolioManage.edit_field)
async def portfolio_edit_field(message: types.Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    data = await state.get_data()
    project_id = data['project_id']
    field = data['field']
    text = (message.text or "").strip()
    new_value = None if text.lower() in ("–æ—á–∏—Å—Ç–∏—Ç—å", "—É–¥–∞–ª–∏—Ç—å") else text
    
    project = db.update_portfolio_project(project_id, {field: new_value})
    if project:
        await message.answer(f"‚úÖ {field.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    await state.clear()
    await bot.delete_message(message.chat.id, message.message_id)

@admin_router.callback_query(F.data == "portfolio_delete_list")
async def portfolio_delete_list(callback: types.CallbackQuery, bot: Bot):
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    projects = db.get_portfolio_projects()
    if not projects:
        await callback.answer("–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ!", show_alert=True)
        return
    
    text = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    await message_manager.edit_main_message(
        callback.from_user.id,
        text,
        callback.message.message_id,
        kb.project_list(projects, "pdelete_select"),
        bot
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pdelete_select_"))
async def portfolio_delete_select(callback: types.CallbackQuery, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = int(callback.data.split("_")[2])
    project = db.get_portfolio_project(project_id)
    if project:
        text = (
            f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç?\n\n"
            f"<b>{project.title}</b>\n"
            f"{project.description}"
        )
        await message_manager.edit_main_message(
            callback.from_user.id,
            text,
            callback.message.message_id,
            kb.portfolio_delete_confirm(project.id),
            bot
        )
    else:
        await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("pdelete_confirm_"))
async def portfolio_delete_confirm(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    project_id = int(callback.data.split("_")[2])
    if db.delete_portfolio_project(project_id):
        await callback.answer("‚úÖ –ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω!", show_alert=True)
        await admin_portfolio(callback)
    else:
        await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("order_set_price_"))
async def order_set_price(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[3])
    await state.set_state(OrderManagement.set_price)
    await state.update_data(order_id=order_id)
    
    order = db.get_client_order(order_id)
    if order:
        await callback.message.answer(
            f"üí∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}\n\n"
            f"üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {order.project_name}\n"
            f"üíº <b>–ë—é–¥–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b> {order.budget}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=kb.back_to_admin_menu(),
            parse_mode="HTML"
        )
    else:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    await callback.answer()

@admin_router.message(OrderManagement.set_price)
async def process_set_price(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã"""
    try:
        price = float(message.text.replace(",", ".").replace(" ", ""))
        if price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
            return
        
        data = await state.get_data()
        order_id = data['order_id']
        
        await state.update_data(final_price=price)
        await state.set_state(OrderManagement.add_notes)
        
        await message.answer(
            f"üí∞ –¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price:,.2f}‚ÇΩ\n\n"
            f"üìù –î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=kb.back_to_admin_menu()
        )
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)!")

@admin_router.message(OrderManagement.add_notes)
async def process_add_notes(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    data = await state.get_data()
    order_id = data['order_id']
    final_price = data['final_price']
    
    notes = message.text.strip() if message.text.strip().lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É
    if db.set_order_final_price(order_id, final_price, notes):
        order = db.get_client_order(order_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            client_message = (
                f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
                f"üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {order.project_name}\n"
                f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {final_price:,.2f}‚ÇΩ\n"
            )
            if notes:
                client_message += f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {notes}\n"
            
            client_message += (
                f"\nüí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –º—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ!"
            )
            
            await bot.send_message(
                order.user_id,
                client_message,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"Error notifying client: {e}")
        
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!\n"
            f"üí∞ –¶–µ–Ω–∞: {final_price:,.2f}‚ÇΩ\n"
            f"üì® –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω",
            reply_markup=kb.back_to_admin_menu()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!")
    
    await state.clear()
    await bot.delete_message(message.chat.id, message.message_id)

@admin_router.callback_query(F.data == "admin_payment_confirmations")
async def admin_payment_confirmations(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç"""
    await state.set_state(AdminMenu.payment_confirmations)
    await message_manager.edit_main_message(
        callback.from_user.id,
        "üí≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç –∑–∞–∫–∞–∑–æ–≤",
        callback.message.message_id,
        admin_payment_confirmations_keyboard(),
        bot
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_accepted_orders_list")
async def admin_accepted_orders_list(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    orders = db.get_accepted_orders_for_payment()
    if not orders:
        await callback.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—É!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    order_ids = [order.id for order in orders]
    await state.update_data(accepted_order_ids=order_ids, current_index=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
    await show_accepted_order_details(callback, order_ids[0], 0, len(order_ids), bot)
    await callback.answer()

async def show_accepted_order_details(callback: types.CallbackQuery, order_id: int, current_index: int, total: int, bot: Bot):
    """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    order = db.get_client_order(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    text = (
        f"üí≥ –ó–∞–∫–∞–∑ #{order.id} - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: @{order.username}\n"
        f"üí∞ –¶–µ–Ω–∞: {order.final_price:,.2f}‚ÇΩ\n\n"
        f"<b>–ü—Ä–æ–µ–∫—Ç:</b> {order.project_name}\n"
        f"<b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b> {order.functionality}\n"
        f"<b>–°—Ä–æ–∫–∏:</b> {order.deadlines}\n"
    )
    
    if order.admin_notes:
        text += f"<b>–ó–∞–º–µ—Ç–∫–∏:</b> {order.admin_notes}\n"
    
    await message_manager.edit_main_message(
        callback.from_user.id,
        text,
        callback.message.message_id,
        accepted_order_actions_keyboard(order.id, current_index, total),
        bot
    )

@admin_router.callback_query(F.data.startswith("accepted_order_prev_"))
async def accepted_order_prev(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø—Ä–∏–Ω—è—Ç–æ–º—É –∑–∞–∫–∞–∑—É"""
    data = await state.get_data()
    order_ids = data.get('accepted_order_ids', [])
    current_index = data.get('current_index', 0)
    
    if not order_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!", show_alert=True)
        return
    
    new_index = (current_index - 1) % len(order_ids)
    await state.update_data(current_index=new_index)
    await show_accepted_order_details(callback, order_ids[new_index], new_index, len(order_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("accepted_order_next_"))
async def accepted_order_next(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–Ω—è—Ç–æ–º—É –∑–∞–∫–∞–∑—É"""
    data = await state.get_data()
    order_ids = data.get('accepted_order_ids', [])
    current_index = data.get('current_index', 0)
    
    if not order_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!", show_alert=True)
        return
    
    new_index = (current_index + 1) % len(order_ids)
    await state.update_data(current_index=new_index)
    await show_accepted_order_details(callback, order_ids[new_index], new_index, len(order_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("confirm_payment_"))
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[2])
    
    if db.confirm_order_payment(order_id):
        order = db.get_client_order(order_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            await bot.send_message(
                order.user_id,
                f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"üìã –ó–∞–∫–∞–∑ #{order.id}: {order.project_name}\n"
                f"üí∞ –°—É–º–º–∞: {order.final_price:,.2f}‚ÇΩ\n\n"
                f"üöÄ –ú—ã –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º!",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"Error notifying client: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        referral_user = db.get_referral_user(order.user_id)
        if referral_user and referral_user.referred_by:
            try:
                referrer_stats = db.get_referral_stats(referral_user.referred_by)
                if referrer_stats:
                    commission = order.final_price * 0.25
                    await bot.send_message(
                        referral_user.referred_by,
                        f"üí∞ <b>–ù–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ!</b>\n\n"
                        f"üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑\n"
                        f"üíµ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {commission:,.2f}‚ÇΩ\n"
                        f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {referrer_stats['balance']:,.2f}‚ÇΩ",
                        parse_mode="HTML"
                    )
            except Exception as e:
                print(f"Error notifying referrer: {e}")
        
        await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        data = await state.get_data()
        order_ids = data.get('accepted_order_ids', [])
        if order_id in order_ids:
            order_ids.remove(order_id)
        
        if not order_ids:
            await admin_payment_confirmations(callback, state, bot)
            return
        
        current_index = data.get('current_index', 0)
        if current_index >= len(order_ids):
            current_index = len(order_ids) - 1
        
        await state.update_data(accepted_order_ids=order_ids, current_index=current_index)
        await show_accepted_order_details(callback, order_ids[current_index], current_index, len(order_ids), bot)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã!", show_alert=True)

@admin_router.callback_query(F.data.startswith("order_edit_price_"))
async def order_edit_price(callback: types.CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("_")[3])
    await state.set_state(OrderManagement.set_price)
    await state.update_data(order_id=order_id, editing_price=True)
    
    order = db.get_client_order(order_id)
    if order:
        await callback.message.answer(
            f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞ #{order.id}\n\n"
            f"üìã <b>–ü—Ä–æ–µ–∫—Ç:</b> {order.project_name}\n"
            f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {order.final_price:,.2f}‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=kb.back_to_admin_menu(),
            parse_mode="HTML"
        )
    else:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
    await callback.answer()

# ================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–´–ú–ò –í–´–ü–õ–ê–¢–ê–ú–ò ================== #

@admin_router.callback_query(F.data == "admin_referral_payouts")
async def admin_referral_payouts(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏"""
    await state.set_state(AdminMenu.referral_payouts)
    await message_manager.edit_main_message(
        callback.from_user.id,
        "üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏",
        callback.message.message_id,
        admin_referral_payouts_keyboard(),
        bot
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_payouts_list")
async def admin_payouts_list(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É"""
    payouts = db.get_pending_payouts()
    if not payouts:
        await callback.answer("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    payout_ids = [payout.id for payout in payouts]
    await state.update_data(payout_ids=payout_ids, current_index=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤—ã–ø–ª–∞—Ç—É
    await show_payout_details(callback, payout_ids[0], 0, len(payout_ids), bot)
    await callback.answer()

async def show_payout_details(callback: types.CallbackQuery, payout_id: int, current_index: int, total: int, bot: Bot):
    """–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É"""
    payout = db.get_referral_payout(payout_id)
    if not payout:
        await callback.answer("–í—ã–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ
    referrer_stats = db.get_referral_stats(payout.referrer_id)
    
    text = (
        f"üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É #{payout.id}\n"
        f"üë§ –†–µ—Ñ–µ—Ä–µ—Ä: ID {payout.referrer_id}\n"
        f"üí∞ –°—É–º–º–∞: {payout.amount:,.2f}‚ÇΩ\n"
        f"üí≥ –ú–µ—Ç–æ–¥: {payout.method}\n"
        f"üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: {payout.recipient_info}\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {payout.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    )
    
    if referrer_stats:
        text += (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:</b>\n"
            f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrer_stats['total_referrals']}\n"
            f"üíµ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referrer_stats['total_earned']:,.2f}‚ÇΩ\n"
            f"üí≥ –ë–∞–ª–∞–Ω—Å: {referrer_stats['balance']:,.2f}‚ÇΩ\n"
        )
    
    if payout.admin_notes:
        text += f"\nüìã –ó–∞–º–µ—Ç–∫–∏: {payout.admin_notes}"
    
    await message_manager.edit_main_message(
        callback.from_user.id,
        text,
        callback.message.message_id,
        payout_actions_keyboard(payout.id, current_index, total),
        bot
    )

@admin_router.callback_query(F.data.startswith("payout_prev_"))
async def payout_prev(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤—ã–ø–ª–∞—Ç–µ"""
    data = await state.get_data()
    payout_ids = data.get('payout_ids', [])
    current_index = data.get('current_index', 0)
    
    if not payout_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç!", show_alert=True)
        return
    
    new_index = (current_index - 1) % len(payout_ids)
    await state.update_data(current_index=new_index)
    await show_payout_details(callback, payout_ids[new_index], new_index, len(payout_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("payout_next_"))
async def payout_next(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤—ã–ø–ª–∞—Ç–µ"""
    data = await state.get_data()
    payout_ids = data.get('payout_ids', [])
    current_index = data.get('current_index', 0)
    
    if not payout_ids:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç!", show_alert=True)
        return
    
    new_index = (current_index + 1) % len(payout_ids)
    await state.update_data(current_index=new_index)
    await show_payout_details(callback, payout_ids[new_index], new_index, len(payout_ids), bot)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("payout_approve_"))
async def payout_approve(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã"""
    payout_id = int(callback.data.split("_")[2])
    
    if db.update_referral_payout_status(payout_id, 'processing'):
        payout = db.get_referral_payout(payout_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        try:
            await bot.send_message(
                payout.referrer_id,
                f"‚úÖ <b>–í—ã–ø–ª–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                f"üí∞ –°—É–º–º–∞: {payout.amount:,.2f}‚ÇΩ\n"
                f"üí≥ –ú–µ—Ç–æ–¥: {payout.method}\n\n"
                f"‚è≥ –í—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"Error notifying referrer: {e}")
        
        await callback.answer("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –†–µ—Ñ–µ—Ä–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        data = await state.get_data()
        current_index = data.get('current_index', 0)
        total = len(data.get('payout_ids', []))
        await show_payout_details(callback, payout_id, current_index, total, bot)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã!", show_alert=True)

@admin_router.callback_query(F.data.startswith("payout_reject_"))
async def payout_reject(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã"""
    payout_id = int(callback.data.split("_")[2])
    await state.set_state(AdminResponse.payout_notes)
    await state.update_data(payout_id=payout_id, payout_action='reject')
    
    await callback.message.answer(
        "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã:",
        reply_markup=kb.back_to_admin_menu()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("payout_complete_"))
async def payout_complete(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã"""
    payout_id = int(callback.data.split("_")[2])
    
    if db.complete_referral_payout(payout_id):
        payout = db.get_referral_payout(payout_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        try:
            await bot.send_message(
                payout.referrer_id,
                f"‚úÖ <b>–í—ã–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üí∞ –°—É–º–º–∞: {payout.amount:,.2f}‚ÇΩ\n"
                f"üí≥ –ú–µ—Ç–æ–¥: {payout.method}\n\n"
                f"üí∏ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"Error notifying referrer: {e}")
        
        await callback.answer("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ—Ñ–µ—Ä–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.", show_alert=True)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
        data = await state.get_data()
        payout_ids = data.get('payout_ids', [])
        if payout_id in payout_ids:
            payout_ids.remove(payout_id)
        
        if not payout_ids:
            await admin_referral_payouts(callback, state, bot)
            return
        
        current_index = data.get('current_index', 0)
        if current_index >= len(payout_ids):
            current_index = len(payout_ids) - 1
        
        await state.update_data(payout_ids=payout_ids, current_index=current_index)
        await show_payout_details(callback, payout_ids[current_index], current_index, len(payout_ids), bot)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã!", show_alert=True)

@admin_router.message(AdminResponse.payout_notes)
async def process_payout_notes(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    payout_id = data['payout_id']
    action = data['payout_action']
    notes = message.text.strip()
    
    if action == 'reject':
        if db.update_referral_payout_status(payout_id, 'failed', notes):
            payout = db.get_referral_payout(payout_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            try:
                await bot.send_message(
                    payout.referrer_id,
                    f"‚ùå <b>–í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                    f"üí∞ –°—É–º–º–∞: {payout.amount:,.2f}‚ÇΩ\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {notes}\n\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"Error notifying referrer: {e}")
            
            await message.answer("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! –†–µ—Ñ–µ—Ä–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã!")
    
    await state.clear()
    await bot.delete_message(message.chat.id, message.message_id)
    await callback.answer()